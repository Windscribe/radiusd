// tests for MPPE from https://www.ietf.org/rfc/rfc3079.txt
package mschap

import (
	"bytes"
	"fmt"
	"testing"
)

func TestGetMasterKey(t *testing.T) {
	hashHash := []byte{
		0x41, 0xC0, 0x0C, 0x58, 0x4B, 0xD2, 0xD9, 0x1C,
		0x40, 0x17, 0xA2, 0xA1, 0x2F, 0xA5, 0x9F, 0x3F,
	}
	ntRes := []byte{
		0x82, 0x30, 0x9E, 0xCD, 0x8D, 0x70, 0x8B, 0x5E,
		0xA0, 0x8F, 0xAA, 0x39, 0x81, 0xCD, 0x83, 0x54,
		0x42, 0x33, 0x11, 0x4A, 0x3D, 0x85, 0xD6, 0xDF,
	}
	res := getMasterKey(hashHash, ntRes)

	expect := []byte{
		0xFD, 0xEC, 0xE3, 0x71, 0x7A, 0x8C, 0x83, 0x8C,
		0xB3, 0x88, 0xE5, 0x27, 0xAE, 0x3C, 0xDD, 0x31,
	}
	if bytes.Compare(res, expect) != 0 {
		t.Fatal(fmt.Printf("getMasterKey bytes wrong. expect=%d found=%d", expect, res))
	}
}

func TestGetAsymmetricStartKey40bit(t *testing.T) {
	masterKey := []byte{
		0xFD, 0xEC, 0xE3, 0x71, 0x7A, 0x8C, 0x83, 0x8C,
		0xB3, 0x88, 0xE5, 0x27, 0xAE, 0x3C, 0xDD, 0x31,
	}
	expect := []byte{
		0x8B, 0x7C, 0xDC, 0x14, 0x9B, 0x99, 0x3A, 0x1B,
	}
	res := getAsymmetricStartKey(masterKey, 8, true)
	//resRecv := getAsymmetricStartKey(masterKey, 8, false)

	if bytes.Compare(res, expect) != 0 {
		t.Fatal(fmt.Printf("GetAsymmetricStartKey40bit bytes wrong. expect=%d found=%d", expect, res))
	}
}

func TestGetAsymmetricStartKey128bit(t *testing.T) {
	masterKey := []byte{
		0xFD, 0xEC, 0xE3, 0x71, 0x7A, 0x8C, 0x83, 0x8C,
		0xB3, 0x88, 0xE5, 0x27, 0xAE, 0x3C, 0xDD, 0x31,
	}
	expect := []byte{
		0x8B, 0x7C, 0xDC, 0x14, 0x9B, 0x99, 0x3A, 0x1B,
		0xA1, 0x18, 0xCB, 0x15, 0x3F, 0x56, 0xDC, 0xCB,
	}
	res := getAsymmetricStartKey(masterKey, 16, true)
	//resRecv := getAsymmetricStartKey(masterKey, 16, false)

	if bytes.Compare(res, expect) != 0 {
		t.Fatal(fmt.Printf("GetAsymmetricStartKey128bit bytes wrong. expect=%d found=%d", expect, res))
	}
}

func TestMultipleOfSmaller(t *testing.T) {
	val := []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09}
	expect := []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	res := multipleOf(val, 16)

	if bytes.Compare(res, expect) != 0 {
		t.Fatal(fmt.Printf("TestMultipleOf bytes wrong. expect=%d found=%d", expect, res))
	}
}
func TestMultipleOfEqual(t *testing.T) {
	val := []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10}
	expect := []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10}
	res := multipleOf(val, 16)

	if bytes.Compare(res, expect) != 0 {
		t.Fatal(fmt.Printf("TestMultipleOf bytes wrong. expect=%d found=%d", expect, res))
	}
}
func TestMultipleOfBigger(t *testing.T) {
	val := []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11}
	expect := []byte{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
		0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	res := multipleOf(val, 16)

	if bytes.Compare(res, expect) != 0 {
		t.Fatal(fmt.Printf("TestMultipleOf bytes wrong. expect=%d found=%d", expect, res))
	}
}

func TestXor(t *testing.T) {
	a := []byte{0x01}
	b := []byte{0x02}
	expect := []byte{0x03}
	c := xor(a, b)

	if bytes.Compare(c, expect) != 0 {
		t.Fatal(fmt.Printf("TestXor bytes wrong. expect=%d found=%d", expect, c))
	}
}

func TestMmpe2(t *testing.T) {
	secret := "vpnxs1234"
	pass := "geheim"
	reqAuth := []byte{0xe8, 0x2a, 0x8d, 0xfa, 0xaa, 0x02, 0x39, 0x2e, 0xfc, 0x9e, 0x1d, 0x9c, 0xbc, 0xf3, 0x28, 0x8d}
	// MS-CHAP2-Response -> NT-Response
	ntResponse := []byte{
		0xa6, 0x32, 0x1b, 0xb3, 0xb7, 0x2f, 0xd2, 0xe8,
		0xba, 0xa0, 0x66, 0x3e, 0xc4, 0x88, 0xcb, 0x03,
		0x72, 0x43, 0x2d, 0xf7, 0x56, 0x80, 0x9a, 0x54,
	}

	sendExpect := []byte{
		0xb9, 0xdf, 0x57, 0xdd, 0x76, 0xc1, 0x46, 0x0a,
		0x72, 0x6e, 0x99, 0x51, 0xad, 0x78, 0x2c, 0x3a,
		0x8e, 0xca, 0xb8, 0x96, 0x7c, 0x11, 0x0f, 0x98,
		0x76, 0x24, 0xca, 0x7a, 0xf5, 0x1d, 0xcc, 0x9d,
		0x63, 0xcc,
	}
	recvExpect := []byte{
		0xb0, 0xc4, 0xbc, 0xa7, 0x6f, 0x1f, 0x2f, 0xa5,
		0x98, 0x50, 0x53, 0x46, 0xa5, 0xaf, 0x20, 0x2e,
		0x85, 0x71, 0x91, 0x5c, 0x15, 0xbe, 0x7e, 0x8d,
		0xc0, 0xc0, 0xcf, 0xd1, 0xc8, 0xea, 0xf2, 0x81,
		0x1e, 0x05,
	}

	// Content of Mmpe2 so we can hardcode Salt
	sendKey, recvKey := masterKeys(pass, ntResponse)
	send := tunnelPass(secret, sendKey, reqAuth, []byte{0xb9, 0xdf})
	recv := tunnelPass(secret, recvKey, reqAuth, []byte{0xb0, 0xc4})

	if bytes.Compare(send, sendExpect) != 0 {
		t.Fatalf("Send-Key diff, expect=%d res=%d", sendExpect, send)
	}
	if bytes.Compare(recv, recvExpect) != 0 {
		t.Fatalf("Recv-Key diff, expect=%d res=%d", recvExpect, recv)
	}
}
