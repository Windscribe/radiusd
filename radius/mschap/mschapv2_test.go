// tests for mschapv2 from https://tools.ietf.org/html/rfc2759#section-9.2
package mschap

import (
	"bytes"
	"fmt"
	"testing"
)

func TestUser2(t *testing.T) {
	user := []byte("User")
	expect := []byte{0x55, 0x73, 0x65, 0x72}

	if bytes.Compare(user, expect) != 0 {
		t.Fatal(fmt.Printf("User bytes wrong. expect=%d found=%d", expect, user))
	}
}

func TestNTPassword2(t *testing.T) {
	ntPass := ntPassword("clientPass")
	expect := []byte{
		0x63, 0x00, 0x6C, 0x00, 0x69,
		0x00, 0x65, 0x00, 0x6E, 0x00,
		0x74, 0x00, 0x50, 0x00, 0x61,
		0x00, 0x73, 0x00, 0x73, 0x00,
	}
	if bytes.Compare(ntPass, expect) != 0 {
		t.Fatal(fmt.Printf("NTPassword bytes wrong. expect=%d found=%d", expect, ntPass))
	}
}

func TestChallengeHash(t *testing.T) {
	userName := []byte("User")
	authChallenge := []byte{
		0x5B, 0x5D, 0x7C, 0x7D, 0x7B, 0x3F, 0x2F, 0x3E,
		0x3C, 0x2C, 0x60, 0x21, 0x32, 0x26, 0x26, 0x28,
	}
	peerChallenge := []byte{
		0x21, 0x40, 0x23, 0x24, 0x25, 0x5E, 0x26, 0x2A,
		0x28, 0x29, 0x5F, 0x2B, 0x3A, 0x33, 0x7C, 0x7E,
	}
	expect := []byte{
		0xD0, 0x2E, 0x43, 0x86, 0xBC, 0xE9, 0x12, 0x26,
	}

	hash := challengeHash(peerChallenge, authChallenge, userName)
	if len(hash) != 8 {
		t.Fatal(fmt.Printf("ChallengeHash did not return 8 octets, received=%v", hash))
	}
	if bytes.Compare(hash, expect) != 0 {
		t.Fatal(fmt.Printf("ChallengeHash bytes wrong. expect=%d found=%d", expect, hash))
	}
}

func TestEncryptMSCHAP2(t *testing.T) {
	authChallenge := []byte{
		0x5B, 0x5D, 0x7C, 0x7D, 0x7B, 0x3F, 0x2F, 0x3E,
		0x3C, 0x2C, 0x60, 0x21, 0x32, 0x26, 0x26, 0x28,
	}
	peerChallenge := []byte{
		0x21, 0x40, 0x23, 0x24, 0x25, 0x5E, 0x26, 0x2A,
		0x28, 0x29, 0x5F, 0x2B, 0x3A, 0x33, 0x7C, 0x7E,
	}
	res, e := Encryptv2(authChallenge, peerChallenge, "User", "clientPass")
	if e != nil {
		t.Fatal(e)
	}

	expect := []byte{
		0x82, 0x30, 0x9E, 0xCD, 0x8D, 0x70, 0x8B, 0x5E,
		0xA0, 0x8F, 0xAA, 0x39, 0x81, 0xCD, 0x83, 0x54,
		0x42, 0x33, 0x11, 0x4A, 0x3D, 0x85, 0xD6, 0xDF,
	}
	if bytes.Compare(res.ChallengeResponse, expect) != 0 {
		t.Fatal(fmt.Printf("TestEncryptMSCHAP2 bytes wrong. expect=%d found=%d", expect, res))
	}

	if len(res.AuthenticatorResponse) != 42 {
		t.Fatal(fmt.Printf("TestEncryptMSCHAP2 authRes not 42-octets, found=%d", res.AuthenticatorResponse))
	}
}

func TesthashNtPasswordHash2(t *testing.T) {
	hash := []byte{
		0x63, 0x00, 0x6C, 0x00, 0x69,
		0x00, 0x65, 0x00, 0x6E, 0x00,
		0x74, 0x00, 0x50, 0x00, 0x61,
		0x00, 0x73, 0x00, 0x73, 0x00,
	}
	expect := []byte{
		0x41, 0xC0, 0x0C, 0x58, 0x4B, 0xD2, 0xD9, 0x1C,
		0x40, 0x17, 0xA2, 0xA1, 0x2F, 0xA5, 0x9F, 0x3F,
	}

	res := hashNtPasswordHash(hash)
	if bytes.Compare(res, expect) != 0 {
		t.Fatal(fmt.Printf("TesthashNtPasswordHash2 bytes wrong. expect=%d found=%d", expect, res))
	}
}

func TestAuthResponse2(t *testing.T) {
	ntResponse := []byte{
		0x82, 0x30, 0x9E, 0xCD, 0x8D, 0x70, 0x8B, 0x5E,
		0xA0, 0x8F, 0xAA, 0x39, 0x81, 0xCD, 0x83, 0x54,
		0x42, 0x33, 0x11, 0x4A, 0x3D, 0x85, 0xD6, 0xDF,
	}
	peerChallenge := []byte{
		0x21, 0x40, 0x23, 0x24, 0x25, 0x5E, 0x26, 0x2A,
		0x28, 0x29, 0x5F, 0x2B, 0x3A, 0x33, 0x7C, 0x7E,
	}
	authChallenge := []byte{
		0x5B, 0x5D, 0x7C, 0x7D, 0x7B, 0x3F, 0x2F, 0x3E,
		0x3C, 0x2C, 0x60, 0x21, 0x32, 0x26, 0x26, 0x28,
	}

	expect := "S=407A5589115FD0D6209F510FE9C04566932CDA56"
	res := authResponse("clientPass", ntResponse, peerChallenge, authChallenge, "User")
	if res != expect {
		t.Fatal(fmt.Printf("TestAuthResponse2 res wrong. expect=%s found=%s", expect, res))
	}
}
